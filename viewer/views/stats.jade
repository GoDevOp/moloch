extends layout

block scripts
  script(type='text/javascript', src='cubism.v1.js')
  script(type='text/javascript', src='highlight.min.js')
  script(type='text/javascript', src='dataTables.buttons.min.js')
  script(type='text/javascript', src='buttons.colVis.min.js')
  script(type='text/javascript', src='dataTables.colReorder.min.js')
  link(rel='stylesheet', type='text/css', href='buttons.dataTables.min.css')
  link(rel='stylesheet', type='text/css', href='colReorder.dataTables.min.css')

block content
  div(style="margin-bottom: 12px")
  div(style="height:2px;")
    select#statsGraphSelect
      option(value="deltaPacketsPerSec") Packets/Sec
      option(value="deltaBytesPerSec") Bytes/Sec
      option(value="deltaBitsPerSec") Bits/Sec
      option(value="deltaSessionsPerSec") Sessions/Sec
      option(value="deltaDroppedPerSec") Dropped/Sec
      option(value="monitoring") Active Sessions
      option(value="freeSpaceM") Free Space
      option(value="memory") Memory
      option(value="cpu") CPU
      option(value="diskQueue") Disk Queue
      option(value="esQueue") ES Queue
      option(value="packetQueue") Packet Queue
      option(value="needSave") Waiting Queue
      option(value="fragsQueue") Frags Queue
      option(value="frags") Frags
      option(value="deltaFragsDroppedPerSec") Frags Dropped/Sec
      option(value="deltaOverloadDroppedPerSec") Overload Dropped/Sec
  div#statsGraph
  table#stats(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
    thead
      tr
        th
        th Node
        th Time
        th Packets Captured
        th Kilobytes Saved
        th Sessions Saved
        th Active Sessions
        th Free Space MB
        th Memory MB
        th CPU
        th Disk Queue
        th Packets / Sec
        th Bytes / Sec
        th Sessions / Sec
        th Input Drops / Sec
        th Packet Queue
        th Fragments Active
        th Fragments Queue
        th Fragments Drop / Sec
        th Overload Drops / Sec
        th Packet Drops / Sec
    tbody
    tfoot
      tr#avg
        th
        th Average
        th
        th#avgpackets
        th#avgkilosaved
        th#avgsessions
        th#avgactive
        th#avgfreespace
        th#avgmemory
        th#avgcpu
        th#avgdiskq
        th#avgpacketssec
        th#avgbytessec
        th#avgsessionssec
        th#avgdropssec
        th#avgpacketq
        th#avgfrags
        th#avgfragsq
        th#avgfragsdropssec
        th#avgoverloaddropssec
        th#avgtotaldropssec
      tr#tot
        th
        th Total
        th
        th#totpackets
        th#totkilosaved
        th#totsessions
        th#totactive
        th#totfreespace
        th#totmemory
        th#totcpu
        th#totdiskq
        th#totpacketssec
        th#totbytessec
        th#totsessionssec
        th#totdropssec
        th#totpacketq
        th#totfrags
        th#totfragsq
        th#totfragsdropssec
        th#totoverloaddropssec
        th#tottotaldropssec
  br
  h1 Elasticsearch
  table#esstats(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
    thead
      tr
        th Node
        th Documents
        th Disk Storage (MB)
        th Heap Size (MB)
        th OS Load
        th ES CPU (%)
        th Read/Sec (K)
        th Write/Sec (K)
        th Searches
    tbody
    tfoot
      tr#avges
        th Average
        th#esavgdocs
        th#esavgdisk
        th#esavgheap
        th#esavgload
        th#esavgcpu
        th#esavgread
        th#esavgwrite
        th#esavgsearches
      tr#totes
        th Total
        th#estotdocs
        th#estotdisk
        th#estotheap
        th#estotload
        th#estotcpu
        th#estotread
        th#estotwrite
        th#estotsearches
  br


  script(type='text/javascript').
    var statsTable;
    var esstatsTable;

    var context = cubism.context()
        .serverDelay(0)
        .clientDelay(0)
        .step(5e3)
        .size(1440);

    function makeStatsGraph(metricName) {
      function metric(name) {
        return context.metric(function(startV, stopV, stepV, callback) {
          $.ajax( {
            "dataType": 'json',
            "type": "GET",
            "url": "#{basePath}dstats.json?nodeName=" + name +
                          "&start=" + startV/1000 +
                          "&stop=" + stopV/1000 +
                          "&step=" + stepV/1000 +
                          "&interval=5" +
                          "&name=" + metricName,
            "success": function(data) {
              if (metricName === "cpu") {
                for (i = 0; i < data.length; i++) {
                  data[i] = data[i]/100.0;
                }
              }
              callback(null, data);
            }
          });
        }, name);
      }

      $("#statsGraph").empty();
      d3.select("#statsGraph").call(function(div) {
        var nodes = !{JSON.stringify(nodes)};
        var metrics = [];
        for (var i = 0, ilen = nodes.length; i < ilen; i++) {
          metrics.push(metric(nodes[i]));
        }

        div.append("div")
            .attr("class", "axis")
            .call(context.axis().orient("top"));

        div.selectAll(".horizon")
            .data(metrics)
          .enter().append("div")
            .attr("class", "horizon")
            .call(context.horizon());

        div.append("div")
            .attr("class", "rule")
            .call(context.rule());

      });
    }

    makeStatsGraph("deltaPackets");

    context.on("focus", function(i) {
        d3.selectAll(".value").style("right", i === null ? null : context.size() - i + "px");
    });

    function numberRender(data, type, row, meta) {
      if (type === "display") {
        return numberWithCommas(data);
      } else {
        return data;
      }
    }

    function numberRenderM(data, type, row, meta) {
      if (type === "display") {
        return numberWithCommas(Math.ceil(data/1000000));
      } else {
        return data;
      }
    }

    function dateRender(data, type, row, meta) {
      if (type === "display") {
        return dateString(data, " ");
      } else {
        return data;
      }
    }




    $(document).ready(function() {
      statsTable = $('#stats').DataTable( {
        language: {
          processing: "<img src=\"watching.gif\"><div class='blink'>I'm Hootin' :D</div>",
          lengthMenu: "_MENU_",
          search: "Node filter: "
        },
        dom: '<"fg-toolbar ui-widget-header ui-helper-clearfix"ipfr>t<"fg-toolbar ui-widget-header ui-helper-clearfix"ipB>',
        paginationType: "full_numbers",
        pageLength: 500,
        lengthMenu: [100, 500, 1000, 5000],
        retrieve: true,
        scrollCollapse: true,
        autoWidth: false,
        colReorder: {
          fixedColumnsLeft: 2
        },
        buttons: {
          dom: {
            container: {
              className: 'dataTables_paginate paging_full_numbers'
            }
          }, 
          buttons: [
            {
              className: 'paginate_button',
              extend: 'colvis',
              columns: ':gt(1)',
              collectionLayout: 'fixed two-column'
            }
          ]
        },
        columns: [
          {
            data : null,
            width: "30",
            sortable: false,
            render: function (data, type, row, meta) {
              if (statsTable.row(meta.row).child.isShown()) {
                return '<img src="images/details_close.png" height="20px">';
              } else {
                return '<img src="images/details_open.png" height="20px">';
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "id",
            type: "string",
            className: "right",
            searchable: true
          },
          {
            data : "currentTime",
            render: dateRender,
            className: "right",
            searchable: false
          },
          {
            data : "totalPackets",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "totalK",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "totalSessions",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "monitoring",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "freeSpaceM",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "memory",
            render: numberRenderM,
            className: "right",
            searchable: false
          },
          {
            data : "cpu",
            render: function (data, type, row, meta) {
              if (type === "display") {
                return data/100.0;
              } else {
                return data;
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "diskQueue",
            render: function (data, type, row, meta) {
              if (type === "display") {
                return numberWithCommas(Math.ceil(data));
              } else {
                return data;
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "deltaPacketsPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaBytesPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaSessionsPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "packetQueue",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "frags",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "fragsQueue",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaFragsDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaOverloadDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaTotalDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          }
        ],
        order: [[1, "asc"]],
        footerCallback: function ( nRow, aaData, iStart, iEnd, aiDisplay ) {
          var avgCells = $('tr#avg > th');
          var totCells = $('tr#tot > th');

          var totals = {};
          var keys = ["totalPackets", "totalK", "totalSessions",
                      "cpu", "frags", "memory", "diskQueue", "packetQueue", "fragsQueue", "monitoring",
                      "deltaDroppedPerSec", "deltaSessionsPerSec", "deltaPacketsPerSec", "deltaBytesPerSec", "deltaFragsDroppedPerSec", "deltaOverloadDroppedPerSec", "deltaTotalDroppedPerSec"];

          keys.forEach(function(key) {
            totals[key] = 0;
            for (var r = 0, rlen = aaData.length; r < rlen; r++) {
              totals[key] += aaData[r][key];
            }
          });


          $("#totpackets").html(numberWithCommas(totals.totalPackets));
          $("#totkilosaved").html(numberWithCommas(totals.totalK));
          $("#totsessions").html(numberWithCommas(totals.totalSessions));
          $("#totactive").html(numberWithCommas(totals.monitoring));
          $("#totmemory").html(numberWithCommas(Math.ceil(totals.memory/1000000)));
          $("#totcpu").html("" + (totals.cpu/100.0));
          $("#totdiskq").html( numberWithCommas(totals.diskQueue));
          $("#totpacketssec").html( numberWithCommas(totals.deltaPacketsPerSec));
          $("#totbytessec").html( numberWithCommas(totals.deltaBytesPerSec));
          $("#totsessionssec").html( numberWithCommas(totals.deltaSessionsPerSec));
          $("#totdropssec").html( numberWithCommas(totals.deltaDroppedPerSec));
          $("#totfrags").html( numberWithCommas(totals.frags));
          $("#totpacketq").html( numberWithCommas(totals.packetQueue));
          $("#totfragsq").html( numberWithCommas(totals.fragsQueue));
          $("#totfragsdropssec").html( numberWithCommas(totals.deltaFragsDroppedPerSec));
          $("#totoverloaddropssec").html( numberWithCommas(totals.deltaOverloadDroppedPerSec));
          $("#tottotaldropssec").html( numberWithCommas(totals.deltaOverloadDroppedPerSec));

          $("#avgpackets").html(numberWithCommas(Math.floor(totals.totalPackets/aaData.length)));
          $("#avgkilosaved").html(numberWithCommas(Math.floor(totals.totalK/aaData.length)));
          $("#avgsessions").html(numberWithCommas(Math.floor(totals.totalSessions/aaData.length)));
          $("#avgactive").html(numberWithCommas(Math.floor(totals.monitoring/aaData.length)));
          $("#avgmemory").html(numberWithCommas(Math.ceil((totals.memory/aaData.length)/1000000)));
          $("#avgcpu").html("" + Math.floor(totals.cpu/aaData.length)/100);
          $("#avgdiskq").html( numberWithCommas(Math.floor(totals.diskQueue/aaData.length)));
          $("#avgpacketssec").html( numberWithCommas(Math.floor(totals.deltaPacketsPerSec/aaData.length)));
          $("#avgbytessec").html( numberWithCommas(Math.floor(totals.deltaBytesPerSec/aaData.length)));
          $("#avgsessionssec").html( numberWithCommas(Math.floor(totals.deltaSessionsPerSec/aaData.length)));
          $("#avgdropssec").html( numberWithCommas(Math.floor(totals.deltaDroppedPerSec/aaData.length)));
          $("#avgfrags").html( numberWithCommas(Math.floor(totals.frags)/aaData.length));
          $("#avgpacketq").html( numberWithCommas(Math.floor(totals.packetQueue/aaData.length)));
          $("#avgfragsq").html( numberWithCommas(Math.floor(totals.fragsQueue/aaData.length)));
          $("#avgfragsdropssec").html( numberWithCommas(Math.floor(totals.deltaFragsDroppedPerSec/aaData.length)));
          $("#avgtotaldropssec").html( numberWithCommas(Math.floor(totals.deltaOverloadDroppedPerSec/aaData.length)));
        }
      } );

      statsTable.on('column-reorder.dt', saveTableState)
                .on('column-visibility.dt', saveTableState)
                .on('order.dt', saveTableState);

      loadTableState(statsTable, ["", "Node", "Time", "Packets Captured", "Active Sessions", "Free Space MB", "Memory MB", "CPU", "Packet Queue", "Packets / Sec", "Bytes / Sec", "Sessions / Sec", "Packet Drops / Sec"]);


      esstatsTable = $('#esstats').DataTable( {
        language: {
          processing: "<img src=\"watching.gif\"><div class='blink'>I'm Hootin' :D</div>",
          lengthMenu: "_MENU_",
          search: "Node filter: "
        },
        dom: '<"fg-toolbar ui-widget-header ui-helper-clearfix"ipfr>t<"fg-toolbar ui-widget-header ui-helper-clearfix"ipB>',
        paginationType: "full_numbers",
        pageLength: 500,
        lengthMenu: [100, 500, 1000, 5000],
        scrollCollapse: true,
        autoWidth: false,
        colReorder: {
          fixedColumnsLeft: 1
        },
        buttons: {
          dom: {
            container: {
              className: 'dataTables_paginate paging_full_numbers'
            }
          }, 
          buttons: [
            {
              className: 'paginate_button',
              extend: 'colvis',
              columns: ':gt(0)',
              collectionLayout: 'fixed two-column'
            }
          ]
        },
        columns: [
          {
            data : "name",
            className: "right",
            type: "string",
            searchable: true
          },
          {
            data : "docs",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "storeSize",
            render: numberRenderM,
            className: "right",
            searchable: false
          },
          {
            data : "heapSize",
            render: numberRenderM,
            className: "right",
            searchable: false
          },
          {
            data : "load",
            render: function (data, type, row, meta) {
              if (type === "display") {
                return data.toFixed(2);
              } else {
                return data;
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "cpu",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "read",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "write",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "searches",
            render: numberRender,
            className: "right",
            searchable: false
          }
        ],
        order: [[3, "desc"]],
        footerCallback: function ( nRow, aaData, iStart, iEnd, aiDisplay ) {
          var totals = {docs: 0, storeSize: 0, heapSize:0, load: 0, cpu:0, read:0, write:0, searches:0};
          for (var r = 0, rlen = aaData.length; r < rlen; r++) {
              totals.docs += aaData[r].docs;
              totals.storeSize += aaData[r].storeSize;
              totals.heapSize += aaData[r].heapSize;
              totals.cpu += aaData[r].cpu;
              totals.read += aaData[r].read;
              totals.write += aaData[r].write;
              totals.searches += aaData[r].searches;
              totals.load += aaData[r].load;
          }

          $("#estotdocs").html(numberWithCommas(totals.docs));
          $("#estotdisk").html(numberWithCommas(Math.ceil(totals.storeSize/1000000)));
          $("#estotheap").html(numberWithCommas(Math.ceil(totals.heapSize/1000000)));
          $("#estotload").html(totals.load.toFixed(2));
          $("#estotcpu").html(numberWithCommas(totals.cpu));
          $("#estotread").html(numberWithCommas(totals.read));
          $("#estotwrite").html(numberWithCommas(totals.write));
          $("#estotsearches").html(numberWithCommas(totals.searches));

          $("#esavgdocs").html(numberWithCommas(Math.floor(totals.docs/aaData.length)));
          $("#esavgdisk").html(numberWithCommas(Math.floor(totals.storeSize/aaData.length/1000000)));
          $("#esavgheap").html(numberWithCommas(Math.floor(totals.heapSize/aaData.length/1000000)));
          $("#esavgload").html((totals.load/aaData.length).toFixed(2));
          $("#esavgcpu").html(numberWithCommas(Math.floor(totals.cpu/aaData.length)));
          $("#esavgread").html(numberWithCommas(Math.floor(totals.read/aaData.length)));
          $("#esavgwrite").html(numberWithCommas(Math.floor(totals.write/aaData.length)));
          $("#esavgsearches").html(numberWithCommas(Math.floor(totals.searches/aaData.length)));
        }
      } );

      loadTableState(esstatsTable, undefined);

      esstatsTable.on('column-reorder.dt', saveTableState)
                  .on('column-visibility.dt', saveTableState)
                  .on('order.dt', saveTableState);

      $(document).on('click', '#stats tbody td img', function () {
        var nTr = this.parentNode.parentNode;
        var row = statsTable.row(nTr);
        if (row.child.isShown()) {
          this.src = "images/details_open.png";
          row.child.hide();
        } else {
          this.src = "images/details_close.png";
          $.ajax( {
            "dataType": 'html',
            "type": "GET",
            "url": '#{basePath}' + row.data().id + '/statsDetail',
            "success": function(data) {
              statsTable.row(nTr).child(data, 'details').show();
            }
          } );

        }
      } );

      function reloadData() {
        $.ajax( {
          "dataType": 'json',
          "type": "GET",
          "url": '#{basePath}stats.json',
          "success": function(data) {
            var nNodes = statsTable.rows().nodes().flatten().toArray();
            for (var i = 0, ilen = data.data.length; i < ilen; i++) {
              var found = false;
              for (var n = 0, nlen = nNodes.length; n < nlen; n++) {
                var id = statsTable.cell(n, 1).data();
                if (id === data.data[i].id) {
                  found = true;
                  statsTable.row(n).data(data.data[i]);
                  break;
                }
              }
              if (!found) {
                statsTable.row.add(data.data[i]);
              }
            }
            statsTable.draw();
          }
        } );

        $.ajax( {
          "dataType": 'json',
          "type": "GET",
          "url": '#{basePath}esstats.json',
          "success": function(data) {
            updateHealth(data.health);
            var nNodes = esstatsTable.rows().nodes().flatten().toArray();
            for (var i = 0, ilen = data.data.length; i < ilen; i++) {
              var found = false;
              for (var n = 0, nlen = nNodes.length; n < nlen; n++) {
                var name = esstatsTable.cell(n, 0).data();
                if (name === data.data[i].name) {
                  found = true;
                  esstatsTable.row(n).data(data.data[i]);
                  break;
                }
              }
              if (!found) {
                esstatsTable.row.add(data.data[i]);
              }
            }
            esstatsTable.draw();
          }
        } );
      }

      $('#statsGraphSelect').change(function() {
        makeStatsGraph($('#statsGraphSelect').val());
        return false;
      });

      setInterval(reloadData, 5000);
      reloadData();
    } );
